
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ca  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f2  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028b  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "GPIO.h"
#define F_CPU 1000000UL
#include <util/delay.h>

int main(){
	GPIO_voidSetPinDirection(PORT2,2,input);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	62 e0       	ldi	r22, 0x02	; 2
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	0e 94 52 00 	call	0xa4	; 0xa4 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORT1,0,output);
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 52 00 	call	0xa4	; 0xa4 <GPIO_voidSetPinDirection>
	while (1)
	{	
		
		if(GPIO_u8GetPinValue(PORT2,2)){
  80:	62 e0       	ldi	r22, 0x02	; 2
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_u8GetPinValue>
  88:	88 23       	and	r24, r24
  8a:	31 f0       	breq	.+12     	; 0x98 <main+0x2c>
			GPIO_voidSetPinValue(PORT1,0,1);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 bf 00 	call	0x17e	; 0x17e <GPIO_voidSetPinValue>
  96:	f4 cf       	rjmp	.-24     	; 0x80 <main+0x14>
		}
		else
		GPIO_voidSetPinValue(PORT1,0,0);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 bf 00 	call	0x17e	; 0x17e <GPIO_voidSetPinValue>
  a2:	ee cf       	rjmp	.-36     	; 0x80 <main+0x14>

000000a4 <GPIO_voidSetPinDirection>:
#include "GPIO.h"
#include "BITMANIPULATION.h"

void GPIO_voidSetPinDirection(u8 Port, u8 Pin, u8 Direction)
{
	switch(Port){
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	01 f1       	breq	.+64     	; 0xe8 <GPIO_voidSetPinDirection+0x44>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <GPIO_voidSetPinDirection+0x12>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	b1 f1       	breq	.+108    	; 0x11a <GPIO_voidSetPinDirection+0x76>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <GPIO_voidSetPinDirection+0x10>
  b2:	4c c0       	rjmp	.+152    	; 0x14c <GPIO_voidSetPinDirection+0xa8>
  b4:	08 95       	ret
		case PORT0:
		if(Direction == output){
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <GPIO_voidSetPinDirection+0x2c>
			SETBIT(DDRA,Pin);
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <GPIO_voidSetPinDirection+0x22>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <GPIO_voidSetPinDirection+0x1e>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
			}
		else{
			CLRBIT(DDRA,Pin);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_voidSetPinDirection+0x38>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_voidSetPinDirection+0x34>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
			}
		break;
		case PORT1:
		if(Direction == output){
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <GPIO_voidSetPinDirection+0x5e>
			SETBIT(DDRB,Pin);
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_voidSetPinDirection+0x54>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_voidSetPinDirection+0x50>
  fc:	82 2b       	or	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
		}
		else{
			CLRBIT(DDRB,Pin);
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <GPIO_voidSetPinDirection+0x6a>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <GPIO_voidSetPinDirection+0x66>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
		}
		break;
		case PORT2:
		if(Direction == output){
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <GPIO_voidSetPinDirection+0x90>
			SETBIT(DDRC,Pin);
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <GPIO_voidSetPinDirection+0x86>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <GPIO_voidSetPinDirection+0x82>
 12e:	82 2b       	or	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
		}
		else{
			CLRBIT(DDRC,Pin);
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <GPIO_voidSetPinDirection+0x9c>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <GPIO_voidSetPinDirection+0x98>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
		}
		break;
		case PORT3:
		if(Direction == output){
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <GPIO_voidSetPinDirection+0xc2>
			SETBIT(DDRD,Pin);
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <GPIO_voidSetPinDirection+0xb8>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <GPIO_voidSetPinDirection+0xb4>
 160:	82 2b       	or	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
 164:	08 95       	ret
		}
		else{
			CLRBIT(DDRD,Pin);
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <GPIO_voidSetPinDirection+0xce>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <GPIO_voidSetPinDirection+0xca>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <GPIO_voidSetPinValue>:
		break;
	}
}

void GPIO_voidSetPinValue(u8 Port, u8 Pin, u8 Value){
	switch(Port){
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	01 f1       	breq	.+64     	; 0x1c2 <GPIO_voidSetPinValue+0x44>
 182:	30 f0       	brcs	.+12     	; 0x190 <GPIO_voidSetPinValue+0x12>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	b1 f1       	breq	.+108    	; 0x1f4 <GPIO_voidSetPinValue+0x76>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	09 f4       	brne	.+2      	; 0x18e <GPIO_voidSetPinValue+0x10>
 18c:	4c c0       	rjmp	.+152    	; 0x226 <GPIO_voidSetPinValue+0xa8>
 18e:	08 95       	ret
		case PORT0:
		if(Value == 1){
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	59 f4       	brne	.+22     	; 0x1aa <GPIO_voidSetPinValue+0x2c>
			SETBIT(PORTA,Pin);
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <GPIO_voidSetPinValue+0x22>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <GPIO_voidSetPinValue+0x1e>
 1a4:	82 2b       	or	r24, r18
 1a6:	8b bb       	out	0x1b, r24	; 27
 1a8:	08 95       	ret
		}
		else{
			CLRBIT(PORTA,Pin);
 1aa:	2b b3       	in	r18, 0x1b	; 27
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <GPIO_voidSetPinValue+0x38>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <GPIO_voidSetPinValue+0x34>
 1ba:	80 95       	com	r24
 1bc:	82 23       	and	r24, r18
 1be:	8b bb       	out	0x1b, r24	; 27
 1c0:	08 95       	ret
		}
		break;
		case PORT1:
		if(Value == 1){
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	59 f4       	brne	.+22     	; 0x1dc <GPIO_voidSetPinValue+0x5e>
			SETBIT(PORTB,Pin);
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <GPIO_voidSetPinValue+0x54>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <GPIO_voidSetPinValue+0x50>
 1d6:	82 2b       	or	r24, r18
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	08 95       	ret
		}
		else{
			CLRBIT(PORTB,Pin);
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <GPIO_voidSetPinValue+0x6a>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <GPIO_voidSetPinValue+0x66>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret
		}
		break;
		case PORT2:
		if(Value == 1){
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <GPIO_voidSetPinValue+0x90>
			SETBIT(PORTC,Pin);
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <GPIO_voidSetPinValue+0x86>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <GPIO_voidSetPinValue+0x82>
 208:	82 2b       	or	r24, r18
 20a:	85 bb       	out	0x15, r24	; 21
 20c:	08 95       	ret
		}
		else{
			CLRBIT(PORTC,Pin);
 20e:	25 b3       	in	r18, 0x15	; 21
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <GPIO_voidSetPinValue+0x9c>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <GPIO_voidSetPinValue+0x98>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	85 bb       	out	0x15, r24	; 21
 224:	08 95       	ret
		}
		break;
		case PORT3:
		if(Value == 1){
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	59 f4       	brne	.+22     	; 0x240 <GPIO_voidSetPinValue+0xc2>
			SETBIT(PORTD,Pin);
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <GPIO_voidSetPinValue+0xb8>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <GPIO_voidSetPinValue+0xb4>
 23a:	82 2b       	or	r24, r18
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	08 95       	ret
		}
		else{
			CLRBIT(PORTD,Pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_voidSetPinValue+0xce>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_voidSetPinValue+0xca>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	82 bb       	out	0x12, r24	; 18
 256:	08 95       	ret

00000258 <GPIO_u8GetPinValue>:
		break;
	}
}
u8 GPIO_u8GetPinValue(u8 Port, u8 Pin){
	u8 ret;
	switch(Port){
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	d1 f0       	breq	.+52     	; 0x290 <GPIO_u8GetPinValue+0x38>
 25c:	28 f0       	brcs	.+10     	; 0x268 <GPIO_u8GetPinValue+0x10>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	59 f1       	breq	.+86     	; 0x2b8 <GPIO_u8GetPinValue+0x60>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	e9 f1       	breq	.+122    	; 0x2e0 <GPIO_u8GetPinValue+0x88>
 266:	4f c0       	rjmp	.+158    	; 0x306 <GPIO_u8GetPinValue+0xae>
		case PORT0:
		ret = GETBIT(PORTA, Pin);
 268:	2b b3       	in	r18, 0x1b	; 27
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	06 2e       	mov	r0, r22
 270:	02 c0       	rjmp	.+4      	; 0x276 <GPIO_u8GetPinValue+0x1e>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <GPIO_u8GetPinValue+0x1a>
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	82 23       	and	r24, r18
 27e:	93 23       	and	r25, r19
 280:	02 c0       	rjmp	.+4      	; 0x286 <GPIO_u8GetPinValue+0x2e>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <GPIO_u8GetPinValue+0x2a>
 28a:	98 2f       	mov	r25, r24
 28c:	8b bb       	out	0x1b, r24	; 27
		break;
 28e:	3b c0       	rjmp	.+118    	; 0x306 <GPIO_u8GetPinValue+0xae>
		case PORT1:
		ret =  GETBIT(PORTB, Pin);
 290:	28 b3       	in	r18, 0x18	; 24
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	06 2e       	mov	r0, r22
 298:	02 c0       	rjmp	.+4      	; 0x29e <GPIO_u8GetPinValue+0x46>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <GPIO_u8GetPinValue+0x42>
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	82 23       	and	r24, r18
 2a6:	93 23       	and	r25, r19
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <GPIO_u8GetPinValue+0x56>
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <GPIO_u8GetPinValue+0x52>
 2b2:	98 2f       	mov	r25, r24
 2b4:	88 bb       	out	0x18, r24	; 24
		break;
 2b6:	27 c0       	rjmp	.+78     	; 0x306 <GPIO_u8GetPinValue+0xae>
		case PORT2:
		ret = GETBIT(PORTC, Pin);
 2b8:	25 b3       	in	r18, 0x15	; 21
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	06 2e       	mov	r0, r22
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <GPIO_u8GetPinValue+0x6e>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <GPIO_u8GetPinValue+0x6a>
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	82 23       	and	r24, r18
 2ce:	93 23       	and	r25, r19
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <GPIO_u8GetPinValue+0x7e>
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <GPIO_u8GetPinValue+0x7a>
 2da:	98 2f       	mov	r25, r24
 2dc:	85 bb       	out	0x15, r24	; 21
		break;
 2de:	13 c0       	rjmp	.+38     	; 0x306 <GPIO_u8GetPinValue+0xae>
		case PORT3:
		ret = GETBIT(PORTD, Pin);
 2e0:	22 b3       	in	r18, 0x12	; 18
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	06 2e       	mov	r0, r22
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <GPIO_u8GetPinValue+0x96>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <GPIO_u8GetPinValue+0x92>
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	82 23       	and	r24, r18
 2f6:	93 23       	and	r25, r19
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <GPIO_u8GetPinValue+0xa6>
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <GPIO_u8GetPinValue+0xa2>
 302:	98 2f       	mov	r25, r24
 304:	82 bb       	out	0x12, r24	; 18
		default:
		
		break;
	}
	return ret;
}
 306:	89 2f       	mov	r24, r25
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
